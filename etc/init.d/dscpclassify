#!/bin/sh /etc/rc.common
# shellcheck disable=SC3043,SC3003,SC2019,SC2018,SC3020,SC3057

START=50
USE_PROCD=1

# Dynamic content
DEBUG_FILE="/tmp/dscpclassify.debug"
INCLUDES_PATH="/tmp/etc/dscpclassify.d"
PRE_INCLUDE="${INCLUDES_PATH}/pre-include.nft"
POST_INCLUDE="${INCLUDES_PATH}/post-include.nft"

# Static content
MAIN="/etc/dscpclassify.d/main.nft"
VERDICTS="/etc/dscpclassify.d/verdicts.nft"
MAPS="/etc/dscpclassify.d/maps.nft"

# Configuration defaults
CLASS_BULK=le
CLASS_HIGH_THROUGHPUT=af13
CLIENT_HINTS=1
THREADED_CLIENT_MIN_BYTES=10000
THREADED_CLIENT_MIN_CONNECTIONS=10
THREADED_SERVICE_MIN_BYTES=1000000
THREADED_SERVICE_MIN_CONNECTIONS=3
WMM=0

debug=1
nft_result=""


log() {
	logger -t dscpclassify -p "daemon.$1" "$2"
	case "$1" in
	info | warning | err) echo "$2" ;;
	esac
}

create_debug_file() {
	{
		echo "dscpclassify ${action}: $(date)"
		echo $'\n'"<--- ${PRE_INCLUDE} --->"
		[ -f "$PRE_INCLUDE" ] && cat "$PRE_INCLUDE"
		echo $'\n'"<--- ${POST_INCLUDE} --->"
		[ -f "$POST_INCLUDE" ] && cat "$POST_INCLUDE"
		echo $'\n'"<--- nft -f ${MAIN} --->"
		echo "$nft_result"
		echo $'\n'"<--- nft list table inet dscpclassify --->"
		nft list table inet dscpclassify 2>&1
	} > "$DEBUG_FILE"
}

delete_debug_file() {
	rm -f "$DEBUG_FILE"
}

delete_includes() {
	rm -rf "$INCLUDES_PATH"
}

destroy_table() {
	nft destroy table inet dscpclassify &>/dev/null
}

cleanup_service() {
	destroy_table
	delete_debug_file
	delete_includes
}

cleanup_setup() {
	delete_debug_file
	delete_includes
}

pre_include() {
	echo "$1" >>"$PRE_INCLUDE"
}

post_include() {
	echo "$1" >>"$POST_INCLUDE"
}

list_append() {
	list="$list"$'\n'"$1"
}

config_foreach_reverse() {
	local list

	config_foreach list_append "$2"
	list=$(echo "$list" | sort -r)

	for config in $list; do
		"$1" "$config" "$3"
	done
}

fw_zone_dev() {
	local dev

	dev="$(fw4 -q zone "$1" | sort -u)"
	[ -n "$dev" ] || return 1

	echo "$dev"
}

format_list() {
	local items="$1" delimiter="$2" encapsulator="$3"
	echo "$items" | tr '\n' ' ' | sed -e "s/^\s*/${encapsulator}/" -e "s/\s*$/${encapsulator}/" -e "s/\([^.]\)\s\+\([^.]\)/\1${encapsulator}${delimiter}${encapsulator}\2/g"
}

check_class() {
	local class

	class="$(echo "$1" | tr 'A-Z' 'a-z')"

	case "$class" in
	le) true ;;  # RFC-8622
	be | df) class="cs0" ;;
	cs0 | cs1 | af11 | af12 | af13 | cs2 | af21 | af22 | af23 | cs3 | af31 | af32 | af33 | cs4 | af41 | af42 | af43 | cs5 | va | ef | cs6 | cs7) true ;;
	*) return 1 ;;
	esac

	echo "$class"
}

check_duration() {
	echo "$1" | grep -q -E -e "^([1-9][0-9]*[smhd]){1,4}$"
}

convert_duration_to_seconds() {
	local duration seconds

	duration="$(echo "$1" | sed -e 's/\([dhms]\)/\1 /g')"
	for i in $duration; do
		case "$i" in
		*d) seconds=$((seconds + ${i::-1} * 86400)) || return 1 ;;
		*h) seconds=$((seconds + ${i::-1} * 3600)) || return 1 ;;
		*m) seconds=$((seconds + ${i::-1} * 60)) || return 1 ;;
		*s) seconds=$((seconds + ${i::-1})) || return 1 ;;
		*) return 1 ;;
		esac
	done

	echo "$seconds"
}

check_family() {
	case "$1" in
	ipv4 | ipv6) return 0 ;;
	esac

	return 1
}

check_port_proto() {
	for i in $1; do
		case "$i" in
		tcp | udp) true ;;
		*) return 1 ;;
		esac
	done
}

check_set_name() {
	case "$1" in
	"")
		log warning "Set is missing the name option"
		return 1
		;;
	threaded_clients | threaded_clients6 | threaded_services | threaded_services6)
		log warning "Sets cannot overwrite built-in dscpclassify sets"
		return 1
		;;
	tc_detect | tc_detect6 | tc_orig_bulk | tc_orig_bulk6 | tc_reply_bulk | tc_reply_bulk6 | ts_detect | ts_detect6)
		log warning "Sets cannot overwrite built-in dscpclassify meter sets"
		return 1
		;;
	esac

	return 0
}

check_set_size() {
	[ -n "$1" ] || return 0

	if ! [ "$1" -ge 1 ] 2>/dev/null || ! [ "$1" -le 65535 ] 2>/dev/null; then
		log warning "Set contains an invalid maxelem option"
		return 1
	fi

	return 0
}

check_set_exists() {
	nft -t list set inet dscpclassify "$1" &>/dev/null
}

check_set_against_existing() {
	local name="$1" type="$2" comment="$3" size="$4" flags="$5" timeout="$6"
	local existing_set existing_type

	existing_set=$(nft -t -j list set inet dscpclassify "$name" 2>/dev/null) || return 2

	type="$(echo "$type" | sed 's/ \+\. \+/ /g')"
	existing_type="$(jsonfilter -s "$existing_set" -e "@.nftables[*].set.type")"
	if [ -n "$existing_type" ]; then
		[ "$existing_type" = "$type" ] || return 1
	else
		existing_type="$(jsonfilter -s "$existing_set" -e "@.nftables[*].set.type[*]" | tr '\n' ' ' | sed 's/ *$//')"
		[ "$existing_type" = "$type" ] || return 1
	fi

	[ "$(jsonfilter -s "$existing_set" -e "@.nftables[*].set.comment")" = "$comment" ] || return 1

	[ "$(jsonfilter -s "$existing_set" -e "@.nftables[*].set.size")" = "$size" ] || return 1

	flags="$(echo "$flags" | sed 's/, \+/ /g')"
	[ "$(jsonfilter -s "$existing_set" -e "@.nftables[*].set.flags[*]" | tr '\n' ' ' | sed 's/ *$//')" = "$flags" ] || return 1

	timeout="$(convert_duration_to_seconds "$timeout")"
	[ "$(jsonfilter -s "$existing_set" -e "@.nftables[*].set.timeout")" = "$timeout" ] || return 1

	return 0
}

check_uint() {
	[ "$1" -ge 0 ] 2>/dev/null
}

parse_rule_ports() {
	for i in $1; do
		echo "$i" | grep -q -E -e "^!?[1-9][0-9]*(-[1-9][0-9]*)?$" || return 1
		case "$i" in
		"!"*) port_negate="$port_negate ${i#*!}" ;;
		*) port="$port $i" ;;
		esac
	done
}

parse_rule_ips() {
	for i in $1; do
		echo "$i" | grep -q -E -e "^!?(([2]([0-4][0-9]|[5][0-5])|[0-1]?[0-9]?[0-9])[.]){3}(([2]([0-4][0-9]|[5][0-5])|[0-1]?[0-9]?[0-9]))(/([0-9]|[12][0-9]|3[0-2]))?$" && {
			case "$i" in
			"!"*) ipv4_negate="$ipv4_negate ${i#*!}" ;;
			*) ipv4="$ipv4 $i" ;;
			esac
			continue
		}

		echo "$i" | grep -q -E -e "^!?(([a-fA-F0-9]{1,4}|):){1,7}([a-fA-F0-9]{1,4}|:)(/[0-9]{1,3})?$" && {
			case "$i" in
			"!"*) ipv6_negate="$ipv6_negate ${i#*!}" ;;
			*) ipv6="$ipv6 $i" ;;
			esac
			continue
		}

		echo "$i" | grep -q -E -e "^!?@\w+$" && {
			case "$i" in
			"!"*) ipset_negate="$ipset_negate ${i#*!}" ;;
			*) ipset="$ipset $i" ;;
			esac
			continue
		}
		return 1
	done
}

parse_set_timeout() {
	[ -n "$timeout" ] || return 0

	[ "$timeout" = 0 ] && {
		flag_timeout=1
		timeout=""
		return 0
	}

	check_uint "$timeout" && {
		flag_timeout=1
		timeout="${timeout}s"
	}

	check_duration "$timeout" || {
		log warning "Set contains an invalid timeout option"
		return 1
	}

	return 0
}

parse_set_flags() {
	[ "$flag_constant" = 1 ] && {
		flags="$flags constant"
	}

	[ "$flag_interval" = 1 ] && {
		flags="$flags interval"
		auto_merge=1
	}

	[ "$flag_timeout" = 1 ] && {
		flags="$flags timeout"
	}

	[ -n "$flags" ] && flags="$(format_list "$flags" ", ")"

	return 0
}

parse_set_type() {
	[ -n "$type" ] && return 0

	[ -n "$match" ] || {
		type="${family}_addr"
		return 0
	}

	log warning "The match set option functionality is not yet fully implemented for user sets"

	for i in $match; do
		case "$i" in
		src_* | dest_*) true ;;
		*)
			log warning "Set contains an invalid match option"
			return 1
			;;
		esac

		case "$i" in
		*_ip) type="$type ${family}_addr" ;;
		*_mac) type="$type ether_addr" ;;
		*_port) type="$type inet_service" ;;
		*_net)
			type="$type ${family}_addr"
			flag_interval=1
			;;
		*)
			log warning "Set contains an invalid match option"
			return 1
			;;
		esac
	done
	type=$(format_list "$type" " . ")

	return 0
}

create_user_set() {
	local comment entry element enabled family flags match size name timeout type
	local flag_constant flag_interval flag_timeout auto_merge

	config_get_bool enabled "$1" enabled 1
	[ "$enabled" = 1 ] || return 0

	config_get comment "$1" comment
	config_get name "$1" name
	config_get family "$1" family ipv4
	config_get match "$1" match
	config_get type "$1" type # allows user to explicity specify the nft set type
	config_get size "$1" maxelem
	config_get timeout "$1" timeout

	config_get_bool flag_constant "$1" constant
	config_get_bool flag_interval "$1" interval

	config_get entry "$1" entry
	config_get element "$1" element # depreciate for naming consistency with fw4 (entry)
	[ -n "$element" ] && log warning "The user set 'element' option is being depreciated in favour of 'entry' for consistency with fw4"

	check_set_name "$name" || return 1
	check_set_size "$size" || return 1
	check_family "$family" || {
		log warning "Set contains an invalid family"
		return 1
	}

	parse_set_type || return 1
	parse_set_timeout || return 1
	parse_set_flags || return 1

	check_set_against_existing "$name" "$type" "$comment" "$size" "$flags" "$timeout" || {
		[ "$?" = 1 ] && post_include "destroy set inet dscpclassify $name"
		post_include "add set inet dscpclassify $name { type $type; ${timeout:+timeout $timeout;} ${size:+size $size;} ${flags:+flags $flags;} ${auto_merge:+auto-merge;} ${comment:+comment \"$comment\";} }"
	}

	[ -n "$entry$element" ] && post_include "add element inet dscpclassify $name { $(format_list "$entry $element" ", ") }"

	return 0
}

rule_l4proto() {
	[ -n "$1" ] || return 0
	l4proto="meta l4proto { $(format_list "$1" ", ") }"
}

rule_nfproto() {
	[ -n "$1" ] || return 0
	nfproto="meta nfproto { $(format_list "$1" ", ") }"
}

rule_oifname() {
	[ -n "$1" ] || return 0
	oifname="oifname { $(format_list "$1" ", " "\"") }"
}

rule_iifname() {
	[ -n "$1" ] || return 0
	iifname="iifname { $(format_list "$1" ", " "\"") }"
}

rule_zone() {
	local device

	[ -n "$2" ] || return 0

	device="$(fw_zone_dev "$2")" || {
		log warning "Rule contains an invalid $1 zone"
		return 1
	}

	case "$1" in
	src) rule_iifname "$device" ;;
	dest) rule_oifname "$device" ;;
	*)
		log err "Invalid direction for zone function"
		return 1
		;;
	esac
}

rule_port() {
	local port port_negate rule xport

	case "$1" in
	src) xport="sport" ;;
	dest) xport="dport" ;;
	*)
		log err "Invalid direction for port function"
		return 1
		;;
	esac

	[ -n "$2" ] || return 0

	parse_rule_ports "$2" || {
		log warning "Rule contains an invalid $1_port"
		return 1
	}
	check_port_proto "$3" || {
		log warning "Rules cannot combine a $1_port with protocols other than 'tcp' or 'udp'"
		return 1
	}

	[ -n "$port" ] && rule="th $xport { $(format_list "$port" ", ") }"
	[ -n "$port_negate" ] && rule="$rule th $xport != { $(format_list "$port_negate" ", ") }"

	eval "$xport"='$rule'
	return 0
}

rule_addr() {
	local rule rule6 xaddr
	local ipv4 ipv6 ipset
	local ipv4_negate ipv6_negate ipset_negate

	case "$1" in
	src) xaddr="saddr" ;;
	dest) xaddr="daddr" ;;
	*)
		log err "Invalid direction for addr function"
		return 1
		;;
	esac

	[ -n "$2" ] || return 0

	if [ -n "$3" ] && ! check_family "$3"; then
		log warning "Rule contains an invalid family"
		return 1
	fi
	parse_rule_ips "$2" || {
		log warning "Rule contains an invalid $1_ip"
		return 1
	}
	if [ -n "$ipset$ipset_negate" ] && [ -n "$ipv4$ipv6$ipv4_negate$ipv6_negate" ]; then
		log warning "Rules must not mix IP addresses and sets in the $1_ip option"
		return 1
	fi
	if [ -n "$ipv4$ipv4_negate" ] && [ "$3" = "ipv6" ]; then
		log warning "Rules cannot combine an ipv4 $1_ip with the 'ipv6' family option"
		return 1
	fi
	if [ -n "$ipv6$ipv6_negate" ] && [ "$3" = "ipv4" ]; then
		log warning "Rules cannot combine an ipv6 $1_ip with the 'ipv4' family option"
		return 1
	fi
	if [ "$(echo "$ipset" | wc -w)" -gt 1 ] || [ "$(echo "$ipset_negate" | wc -w)" -gt 1 ]; then
		log warning "Rules must not contain more than one set for the $1_ip option"
		return 1
	fi

	[ -n "$ipv4" ] && rule="ip $xaddr { $(format_list "$ipv4" ", ") }"
	[ -n "$ipv4_negate" ] && rule="$rule ip $xaddr != { $(format_list "$ipv4_negate" ", ") }"

	[ -n "$ipv6" ] && rule6="ip6 $xaddr { $(format_list "$ipv6" ", ") }"
	[ -n "$ipv6_negate" ] && rule6="$rule6 ip6 $xaddr != { $(format_list "$ipv6_negate" ", ") }"

	[ -n "$ipset$ipset_negate" ] && case "$3" in
	ipv4)
		[ -n "$ipset" ] && rule="$rule ip $xaddr $ipset"
		[ -n "$ipset_negate" ] && rule="$rule ip $xaddr != $ipset_negate"
		;;
	ipv6)
		[ -n "$ipset" ] && rule6="$rule6 ip6 $xaddr $ipset"
		[ -n "$ipset_negate" ] && rule6="$rule6 ip6 $xaddr != $ipset_negate"
		;;
	*)
		log warning "Rules must contain the family option when a set is present in the $1_ip option"
		return 1
		;;
	esac

	eval "$xaddr"='$rule'
	eval "$xaddr"6='$rule6'
	return 0
}

rule_device() {
	[ -n "$1" ] || return 0

	[ -n "$2" ] || {
		log warning "Rules must use the device and direction options in conjunction"
		return 1
	}

	case "$2" in
	in) rule_iifname "$1" ;;
	out) rule_oifname "$1" ;;
	*)
		log warning "The direction rule option must contain either 'in' or 'out'"
		return 1
		;;
	esac
}

rule_verdict() {
	local class="$1"

	[ -n "$class" ] || {
		log warning "Rule is missing the DSCP class option"
		return 1
	}
	class="$(check_class "$class")" || {
		log warning "Rule contains an invalid DSCP class"
		return 1
	}
	verdict="goto ct_set_${class}"
}

create_user_rule() {
	local enabled family proto direction device dest dest_ip dest_port src src_ip src_port counter class name
	local nfproto l4proto oifname daddr daddr6 dport iifname saddr saddr6 sport verdict

	config_get_bool enabled "$1" enabled 1
	[ "$enabled" = 1 ] || return 0

	config_get family "$1" family
	config_get proto "$1" proto
	config_get device "$1" device
	config_get direction "$1" direction
	config_get dest "$1" dest
	config_get dest_ip "$1" dest_ip
	config_get dest_port "$1" dest_port
	config_get src "$1" src
	config_get src_ip "$1" src_ip
	config_get src_port "$1" src_port
	config_get_bool counter "$1" counter
	config_get class "$1" class
	config_get name "$1" name

	rule_nfproto "$family" || return 1
	rule_l4proto "$proto" || return 1
	rule_zone dest "$dest" || return 1
	rule_addr dest "$dest_ip" "$family" || return 1
	rule_port dest "$dest_port" "$proto" || return 1
	rule_zone src "$src" || return 1
	rule_addr src "$src_ip" "$family" || return 1
	rule_port src "$src_port" "$proto" || return 1
	rule_device "$device" "$direction" || return 1
	rule_verdict "$class" || return 1

	[ -z "$daddr$saddr$daddr6$saddr6" ] && {
		post_include "insert rule inet dscpclassify static_classify $nfproto $l4proto $oifname $dport $iifname $sport ${counter:+counter} $verdict ${name:+comment \"$name\"}"
		return 0
	}
	[ -n "$daddr$saddr" ] && {
		post_include "insert rule inet dscpclassify static_classify $nfproto $l4proto $oifname $daddr $dport $iifname $saddr $sport ${counter:+counter} $verdict ${name:+comment \"$name\"}"
	}
	[ -n "$daddr6$saddr6" ] && {
		post_include "insert rule inet dscpclassify static_classify $nfproto $l4proto $oifname $daddr6 $dport $iifname $saddr6 $sport ${counter:+counter} $verdict ${name:+comment \"$name\"}"
	}
	return 0
}

create_client_hints_rule() {
	local client_hints

	config_get_bool client_hints global client_hints $CLIENT_HINTS
	[ "$client_hints" = 1 ] || return 0

	post_include "insert rule inet dscpclassify static_classify ip6 dscp != { cs0, cs6, cs7 } iifname != \$wan ip6 dscp vmap @dscp_ct"
	post_include "insert rule inet dscpclassify static_classify ip dscp != { cs0, cs6, cs7 } iifname != \$wan ip dscp vmap @dscp_ct"
}

create_threaded_client_rule() {
	local class_bulk threaded_client_min_bytes threaded_client_min_connections

	config_get threaded_client_min_connections global threaded_client_min_connections $THREADED_CLIENT_MIN_CONNECTIONS
	if ! check_uint "$threaded_client_min_connections" || [ "$threaded_client_min_connections" -lt 2 ]; then
		log err "Global option threaded_client_min_connections contains an invalid value"
		return 1
	fi
	config_get threaded_client_min_bytes global threaded_client_min_bytes $THREADED_CLIENT_MIN_BYTES
	if ! check_uint "$threaded_client_min_bytes" || [ "$threaded_client_min_bytes" = 0 ]; then
		log err "Global option threaded_client_min_bytes contains an invalid value"
		return 1
	fi
	config_get class_bulk global class_bulk $CLASS_BULK
	class_bulk="$(check_class "$class_bulk")" || {
		log err "Global option class_bulk contains an invalid DSCP class"
		return 1
	}

	check_set_exists tc_detect && post_include "destroy set inet dscpclassify tc_detect"
	post_include "add rule inet dscpclassify established_connection meter tc_detect { ip daddr . th dport . meta l4proto timeout 5s limit rate over $((threaded_client_min_connections - 1))/minute } add @threaded_clients { ip daddr . th dport . meta l4proto timeout 30s }"
	check_set_exists tc_detect6 && post_include "destroy set inet dscpclassify tc_detect6"
	post_include "add rule inet dscpclassify established_connection meter tc_detect6 { ip6 daddr . th dport . meta l4proto timeout 5s limit rate over $((threaded_client_min_connections - 1))/minute } add @threaded_clients6 { ip6 daddr . th dport . meta l4proto timeout 30s }"

	check_set_exists tc_orig_bulk && post_include "destroy set inet dscpclassify tc_orig_bulk"
	post_include "add rule inet dscpclassify threaded_client meter tc_orig_bulk { ip saddr . th sport . meta l4proto timeout 5m limit rate over $((threaded_client_min_bytes - 1)) bytes/hour } update @threaded_clients { ip saddr . th sport . meta l4proto timeout 5m } goto ct_set_${class_bulk}"
	check_set_exists tc_orig_bulk6 && post_include "destroy set inet dscpclassify tc_orig_bulk6"
	post_include "add rule inet dscpclassify threaded_client meter tc_orig_bulk6 { ip6 saddr . th sport . meta l4proto timeout 5m limit rate over $((threaded_client_min_bytes - 1)) bytes/hour } update @threaded_clients6 { ip6 saddr . th sport . meta l4proto timeout 5m } goto ct_set_${class_bulk}"

	check_set_exists tc_reply_bulk && post_include "destroy set inet dscpclassify tc_reply_bulk"
	post_include "add rule inet dscpclassify threaded_client_reply meter tc_reply_bulk { ip daddr . th dport . meta l4proto timeout 5m limit rate over $((threaded_client_min_bytes - 1)) bytes/hour } update @threaded_clients { ip daddr . th dport . meta l4proto timeout 5m } goto ct_set_${class_bulk}"
	check_set_exists tc_reply_bulk6 && post_include "destroy set inet dscpclassify tc_reply_bulk6"
	post_include "add rule inet dscpclassify threaded_client_reply meter tc_reply_bulk6 { ip6 daddr . th dport . meta l4proto timeout 5m limit rate over $((threaded_client_min_bytes - 1)) bytes/hour } update @threaded_clients6 { ip6 daddr . th dport . meta l4proto timeout 5m } goto ct_set_${class_bulk}"
}

create_threaded_service_rule() {
	local class_high_throughput threaded_service_min_bytes threaded_service_min_connections

	config_get threaded_service_min_connections global threaded_service_min_connections $THREADED_SERVICE_MIN_CONNECTIONS
	if ! check_uint "$threaded_service_min_connections" || [ "$threaded_service_min_connections" -lt 2 ]; then
		log err "Global option threaded_service_min_connections contains an invalid value"
		return 1
	fi
	config_get threaded_service_min_bytes global threaded_service_min_bytes $THREADED_SERVICE_MIN_BYTES
	check_uint "$threaded_service_min_bytes" || {
		log err "Global option threaded_service_min_bytes contains an invalid value"
		return 1
	}
	config_get class_high_throughput global class_high_throughput $CLASS_HIGH_THROUGHPUT
	class_high_throughput="$(check_class "$class_high_throughput")" || {
		log err "Global option class_high_throughput contains an invalid DSCP class"
		return 1
	}

	check_set_exists ts_detect && post_include "destroy set inet dscpclassify ts_detect"
	post_include "add rule inet dscpclassify established_connection meter ts_detect { ip daddr . ip saddr and 255.255.255.0 . th sport . meta l4proto timeout 5s limit rate over $((threaded_service_min_connections - 1))/minute } add @threaded_services { ip daddr . ip saddr and 255.255.255.0 . th sport . meta l4proto timeout 30s }"
	check_set_exists ts_detect6 && post_include "destroy set inet dscpclassify ts_detect6"
	post_include "add rule inet dscpclassify established_connection meter ts_detect6 { ip6 daddr . ip6 saddr and ffff:ffff:ffff:: . th sport . meta l4proto timeout 5s limit rate over $((threaded_service_min_connections - 1))/minute } add @threaded_services6 { ip6 daddr . ip6 saddr and ffff:ffff:ffff:: . th sport . meta l4proto timeout 30s }"

	post_include "add rule inet dscpclassify threaded_service ct original bytes < $threaded_service_min_bytes return"
	post_include "add rule inet dscpclassify threaded_service update @threaded_services { ip saddr . ip daddr and 255.255.255.0 . th dport . meta l4proto timeout 5m }"
	post_include "add rule inet dscpclassify threaded_service update @threaded_services6 { ip6 saddr . ip6 daddr and ffff:ffff:ffff:: . th dport . meta l4proto timeout 5m }"
	post_include "add rule inet dscpclassify threaded_service goto ct_set_${class_high_throughput}"

	post_include "add rule inet dscpclassify threaded_service_reply ct reply bytes < $threaded_service_min_bytes return"
	post_include "add rule inet dscpclassify threaded_service_reply update @threaded_services { ip daddr . ip saddr and 255.255.255.0 . th sport . meta l4proto timeout 5m }"
	post_include "add rule inet dscpclassify threaded_service_reply update @threaded_services6 { ip6 daddr . ip6 saddr and ffff:ffff:ffff:: . th sport . meta l4proto timeout 5m }"
	post_include "add rule inet dscpclassify threaded_service_reply goto ct_set_${class_high_throughput}"
}

create_dscp_mark_rule() {
	local wmm

	config_get_bool wmm global wmm $WMM
	
	[ "$wmm" = 1 ] && post_include "add rule inet dscpclassify postrouting oifname \$lan ct mark & \$ct_dscp vmap @ct_wmm"
	post_include "add rule inet dscpclassify postrouting ct mark & \$ct_dscp vmap @ct_dscp"
}

create_flush_actions() {
	for chain in $(nft -j list chains | jsonfilter -e '@.nftables[@.chain.table="dscpclassify"].chain.name'); do
		pre_include "flush chain inet dscpclassify ${chain}"
	done
	for map in $(nft -j list maps | jsonfilter -e '@.nftables[@.map.table="dscpclassify"].map.name'); do
		pre_include "flush map inet dscpclassify ${map}"
	done
}

create_pre_include() {
	rm -f "$PRE_INCLUDE"

	pre_include "define lan = { $(format_list "$lan" ", " "\"") }"
	pre_include "define wan = { $(format_list "$wan" ", " "\"") }"

	[ "$action" = "reload" ] && create_flush_actions 
	pre_include "add table inet dscpclassify"
	check_set_exists threaded_clients || pre_include "add set inet dscpclassify threaded_clients { type ipv4_addr . inet_service . inet_proto; flags timeout; }"
	check_set_exists threaded_clients6 || pre_include "add set inet dscpclassify threaded_clients6 { type ipv6_addr . inet_service . inet_proto; flags timeout; }"
	check_set_exists threaded_services || pre_include "add set inet dscpclassify threaded_services { type ipv4_addr . ipv4_addr . inet_service . inet_proto; flags timeout; }"
	check_set_exists threaded_services6 || pre_include "add set inet dscpclassify threaded_services6 { type ipv6_addr . ipv6_addr . inet_service . inet_proto; flags timeout; }"

	pre_include "include \"${VERDICTS}\""
	pre_include "include \"${MAPS}\""
}

create_post_include() {
	rm -f "$POST_INCLUDE"

	create_client_hints_rule || return 1

	config_foreach create_user_set set   # depreciating in favour of 'ipset' section name for consistency with fw4
	config_foreach create_user_set ipset # section name consistent with fw4
	config_foreach_reverse create_user_rule rule

	create_threaded_client_rule || return 1
	create_threaded_service_rule || return 1

	create_dscp_mark_rule || return 1
}

get_zones() {
	local dev lan_zones wan_zones

	config_get lan global lan_device
	config_get lan_zones global lan_zone "lan"

	for i in $lan_zones; do
		dev="$(fw_zone_dev "$i")" && lan="${lan:+$lan }$dev"
	done
	[ -n "$lan" ] || return 1

	config_get wan global wan_device
	config_get wan_zones global wan_zone "wan"

	for i in $wan_zones; do
		dev="$(fw_zone_dev "$i")" && wan="${wan:+$wan }$dev"
	done
	[ -n "$wan" ] || return 1
}

setup() {
	local lan wan

	cleanup_setup

	config_load dscpclassify || {
		log err "Failed to load config file"
		return 1
	}
	config_get_bool debug global debug "$debug"

	get_zones || {
		log info "Deferring ${action} because lan/wan firewall zones are unavailable"
		return 0
	}

	[ "$action" = "start" ] && destroy_table

	mkdir -p "$INCLUDES_PATH" || {
		log err "Failed to create path: ${INCLUDES_PATH}"
		return 1
	}
	create_pre_include || {
		log err "Failed to create pre-include rules"
		return 1
	}
	create_post_include || {
		log err "Failed to create post-include rules"
		return 1
	}

	nft_result="$(nft -f "$MAIN" 2>&1)" || {
		log err "Failed to load main.nft with status: $?"
		return 1
	}

	log notice "Service ${action}ed"
	return 0
}

setup_failed() {
	log warning "Service ${action} failed"
	[ "$debug" = 1 ] && create_debug_file
	destroy_table
	delete_includes
}

start_service() {
	setup || {
		setup_failed
		return 1
	}
	cleanup_setup
	return 0
}

reload_service() {
	/etc/init.d/dscpclassify status &>/dev/null || {
		echo "The dscpclassify service is not loaded"
		return 1
	}
	start_service
}

stop_service() {
	cleanup_service
	log notice "Service stopped"
	return 0
}
