#!/usr/sbin/nft -f

## Masks for extracting/storing data in the conntrack mark
define ct_dscp = 0x0000003f         # 00111111
define ct_dynamic = 0x00000080      # 10000000
define ct_processed = 0x00000040    # 01000000
define ct_service = 0x000000ff      # 11111111
define ct_unused = 0xffffff00       # 11111111111111111111111100000000

## DSCP classification values
define cs0 = 0
define lephb = 1
define cs1 = 8
define af11 = 10
define af12 = 12
define af13 = 14
define cs2 = 16
define af21 = 18
define af22 = 20
define af23 = 22
define cs3 = 24
define af31 = 26
define af32 = 28
define af33 = 30
define cs4 = 32
define af41 = 34
define af42 = 36
define af43 = 38
define cs5 = 40
define va = 44
define ef = 46
define cs6 = 48
define cs7 = 56

## Include variable table content
include "/tmp/etc/dscpclassify.d/pre-include.nft"

table inet dscpclassify {
    ## Classify connections to the router
    chain input {
        type filter hook input priority 2; policy accept
        iif "lo" return
        ct mark & $ct_service == 0 ct direction original jump static_classify
        ct mark & $ct_dynamic != 0 jump dynamic_classify
    }

    ## Classify and DSCP mark connections from/forwarded via the router
    chain postrouting {
        type filter hook postrouting priority 2; policy accept
        oif "lo" return
        ct mark & $ct_service == 0 ct direction original jump static_classify
        ct mark & $ct_dynamic != 0 jump dynamic_classify

        ## DSCP marking rules are added here by the init script
    }

    chain static_classify {
        ## User defined rules in '/etc/config/dscpclassify' are inserted here by the init script

        ## Non TCP/UDP unclassified connections are Best Effort (CS0)
        meta l4proto != { tcp, udp } goto ct_set_cs0

        ## Set the dynamic conntrack bit on unclassified connections
        ct mark set ct mark & $ct_unused | $ct_dynamic
    }

    chain dynamic_classify {
        ## Unreplied connections are ignored by dynamic classification logic
        ct status and seen-reply != seen-reply return

        ## Handle connection replies
        ct direction reply goto dynamic_classify_reply

        ## Assess threaded client connections (i.e. P2P) for classification
        ip saddr . th sport . meta l4proto @threaded_clients goto threaded_client
        ip6 saddr . th sport . meta l4proto @threaded_clients6 goto threaded_client

        ## Assess threaded service connections for classification
        ip saddr . ip daddr and 255.255.255.0 . th dport . meta l4proto @threaded_services goto threaded_service
        ip6 saddr . ip6 daddr and ffff:ffff:ffff:: . th dport . meta l4proto @threaded_services6 goto threaded_service

        ## Dynamic rules are added here by the init script
    }

    chain dynamic_classify_reply {
        ## Established connection
        ct mark & $ct_processed == 0 ct mark set ct mark | $ct_processed jump established_connection

        ## Assess threaded client connections (i.e. P2P) for classification
        ip daddr . th dport . meta l4proto @threaded_clients goto threaded_client_reply
        ip6 daddr . th dport . meta l4proto @threaded_clients6 goto threaded_client_reply

        ## Assess threaded service connections for classification
        ip daddr . ip saddr and 255.255.255.0 . th sport . meta l4proto @threaded_services goto threaded_service_reply
        ip6 daddr . ip6 saddr and ffff:ffff:ffff:: . th sport . meta l4proto @threaded_services6 goto threaded_service_reply

        ## Dynamic rules are added here by the init script
    }

    chain established_connection {
        ## Threaded service and multi-connection client rules are added here by the init script
    }

    chain threaded_client {
        ## Threaded client rules are added here by the init script
    }

    chain threaded_client_reply {
        ## Threaded client rules are added here by the init script
    }

    chain threaded_service {
        ## Threaded service rules are added here by the init script
    }

    chain threaded_service_reply {
        ## Threaded service rules are added here by the init script
    }
}

## Include configurable rules
include "/tmp/etc/dscpclassify.d/post-include.nft"
