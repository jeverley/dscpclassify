#!/usr/sbin/nft -f

## Include configurable variable definitions
include "/tmp/etc/dscpclassify-pre.include"

## Masks for extracting/storing data in the conntrack mark
define ct_dscp = 0x0000003f
define ct_dyn = 0x00000080
define ct_dyn_dscp = 0x000000ff
define ct_unclassified = 0x00000040
define ct_unused = 0xffffff00
define ct_unused_dyn = 0xffffff80

## DSCP classification values
define cs0 = 0
define lephb = 1
define cs1 = 8
define af11 = 10
define af12 = 12
define af13 = 14
define cs2 = 16
define af21 = 18
define af22 = 20
define af23 = 22
define cs3 = 24
define af31 = 26
define af32 = 28
define af33 = 30
define cs4 = 32
define af41 = 34
define af42 = 36
define af43 = 38
define cs5 = 40
define va = 44
define ef = 46
define cs6 = 48
define cs7 = 56

table inet dscpclassify {
    ## Conntrack mark to DSCP class vmap
    map ct_dscp {
        type mark : verdict
        elements = {
            $cs0 : goto dscp_set_cs0,
            $lephb : goto dscp_set_le,
            $cs1 : goto dscp_set_cs1,
            $af11 : goto dscp_set_af11,
            $af12 : goto dscp_set_af12,
            $af13 : goto dscp_set_af13,
            $cs2 : goto dscp_set_cs2,
            $af21 : goto dscp_set_af21,
            $af22 : goto dscp_set_af22,
            $af23 : goto dscp_set_af23,
            $cs3 : goto dscp_set_cs3,
            $af31 : goto dscp_set_af31,
            $af32 : goto dscp_set_af32,
            $af33 : goto dscp_set_af33,
            $cs4 : goto dscp_set_cs4,
            $af41 : goto dscp_set_af41,
            $af42 : goto dscp_set_af42,
            $af43 : goto dscp_set_af43,
            $cs5 : goto dscp_set_cs5,
            $va : goto dscp_set_va,
            $ef : goto dscp_set_ef,
            $cs6 : goto dscp_set_cs6,
            $cs7 : goto dscp_set_cs7,
        }
    }

    ## Conntrack mark to WMM class vmap (RFC-8325)
    map ct_wmm {
        type mark : verdict
        elements = {
            $cs0 : goto dscp_set_cs0,   # WMM BE
            $lephb : goto dscp_set_le,  # WMM BK
            $cs1 : goto dscp_set_cs1,   # WMM BK
            $af11 : goto dscp_set_cs0,  # WMM BE
            $af12 : goto dscp_set_cs0,  # WMM BE
            $af13 : goto dscp_set_cs0,  # WMM BE
            $cs2 : goto dscp_set_cs0,   # WMM BE
            $af21 : goto dscp_set_cs3,  # WMM BE
            $af22 : goto dscp_set_cs3,  # WMM BE
            $af23 : goto dscp_set_cs3,  # WMM BE
            $cs3 : goto dscp_set_cs4,   # WMM VI
            $af31 : goto dscp_set_cs4,  # WMM VI
            $af32 : goto dscp_set_cs4,  # WMM VI
            $af33 : goto dscp_set_cs4,  # WMM VI
            $cs4 : goto dscp_set_cs4,   # WMM VI
            $af41 : goto dscp_set_cs4,  # WMM VI
            $af42 : goto dscp_set_cs4,  # WMM VI
            $af43 : goto dscp_set_cs4,  # WMM VI
            $cs5 : goto dscp_set_cs5,   # WMM VI
            $va : goto dscp_set_cs6,    # WMM VO
            $ef : goto dscp_set_cs6,    # WMM VO
            $cs6 : goto dscp_set_cs7,   # WMM VO
            $cs7 : goto dscp_set_cs7,   # WMM VO
        }
    }

    ## DSCP class to conntrack mark vmap
    map dscp_ct {
        type dscp : verdict
        elements = {
            cs0 : goto ct_set_cs0,
            $lephb : goto ct_set_le,
            cs1 : goto ct_set_cs1,
            af11 : goto ct_set_af11,
            af12 : goto ct_set_af12,
            af13 : goto ct_set_af13,
            cs2 : goto ct_set_cs2,
            af21 : goto ct_set_af21,
            af22 : goto ct_set_af22,
            af23 : goto ct_set_af23,
            cs3 : goto ct_set_cs3,
            af31 : goto ct_set_af31,
            af32 : goto ct_set_af32,
            af33 : goto ct_set_af33,
            cs4 : goto ct_set_cs4,
            af41 : goto ct_set_af41,
            af42 : goto ct_set_af42,
            af43 : goto ct_set_af43,
            cs5 : goto ct_set_cs5,
            $va : goto ct_set_va,
            ef : goto ct_set_ef,
            cs6 : goto ct_set_cs6,
            cs7 : goto ct_set_cs7,
        }
    }

    ## Classify connections to the router
    chain input {
        type filter hook input priority 2; policy accept
        meta iifname "lo" return
        ct mark and $ct_dyn_dscp == 0 ct direction original jump static_classify
        ct mark and $ct_dyn == $ct_dyn jump dynamic_classify
    }

    ## Classify and DSCP mark connections from/forwarded via the router
    chain postrouting {
        type filter hook postrouting priority 2; policy accept
        meta oifname "lo" return
        ct mark and $ct_dyn_dscp == 0 ct direction original jump static_classify
        ct mark and $ct_dyn == $ct_dyn jump dynamic_classify

        ## DSCP marking rules are added here by init script
    }

    chain static_classify {
        ## User defined rules in '/etc/config/dscpclassify' are inserted here by init script

        ## Unclassified packets get dynamic conntrack mark
        ct mark set ct mark and $ct_unused or $ct_dyn
    }

    ## Dynamically categorise connections
    chain dynamic_classify {
        meta l4proto != { tcp, udp } return

        ## Detect connection threading by counting connections opened within a time period
        ct packets 1 goto detect_threading

        ## Assess threaded service connections for downgrade to High-Throughput class (AF11)
        meta l4proto . ip saddr . ip daddr and 255.255.255.0 . th dport @threaded_services goto threaded_service
        meta l4proto . ip6 saddr . ip6 daddr and ffff:ffff:ffff:: . th dport @threaded_services6 goto threaded_service
        meta l4proto . ip daddr . ip saddr and 255.255.255.0 . th sport @threaded_services goto threaded_service_response
        meta l4proto . ip6 daddr . ip6 saddr and ffff:ffff:ffff:: . th sport @threaded_services6 goto threaded_service_response

        ## Assess threaded client connections (i.e. P2P) for downgrade to Bulk class (CS1)
        meta l4proto . ip saddr . th sport @threaded_clients goto threaded_client
        meta l4proto . ip6 saddr . th sport @threaded_clients6 goto threaded_client
        meta l4proto . ip daddr . th dport @threaded_clients goto threaded_client_response
        meta l4proto . ip6 daddr . th dport @threaded_clients6 goto threaded_client_response

        ## Assess UDP connections for Real-Time class (CS4)
        meta l4proto udp ct state != new th dport != { 80, 443 } th sport != { 80, 443 } jump dynamic_realtime

        ## Mark unclassified connections as non-dynamic Best Effort (CS0)
        ct mark and $ct_dscp == 0 ct bytes > $unclassified_bytes goto ct_set_cs0
    }

    chain detect_threading {
        ## Detect multiple connections being opened to a service from a single source address
        meter tsdetect { meta l4proto . ip saddr . ip daddr and 255.255.255.0 . th dport timeout 5s limit rate over 2/minute } add @threaded_services { meta l4proto . ip saddr . ip daddr and 255.255.255.0 . th dport timeout 20s }
        meter tsdetect6 { meta l4proto . ip6 saddr . ip6 daddr and ffff:ffff:ffff:: . th dport timeout 5s limit rate over 2/minute } add @threaded_services6 { meta l4proto . ip6 saddr . ip6 daddr and ffff:ffff:ffff:: . th dport timeout 20s }

        ## Detect multiple connections being opened from a single source port (i.e. P2P)
        meter tcdetect { meta l4proto . ip saddr . th sport timeout 5s limit rate over 10/minute } add @threaded_clients { meta l4proto . ip saddr . th sport timeout 5s }
        meter tcdetect6 { meta l4proto . ip6 saddr . th sport timeout 5s limit rate over 10/minute } add @threaded_clients6 { meta l4proto . ip6 saddr . th sport timeout 5s }
    }

    ## Mark high-throughput threaded connections to a service as AF13
    chain threaded_service {
        ct bytes < $threaded_service_bytes return
        ct mark set ct mark and $ct_unused_dyn or $af13
        update @threaded_services { meta l4proto . ip saddr . ip daddr and 255.255.255.0 . th dport timeout 60s }
        update @threaded_services6 { meta l4proto . ip6 saddr . ip6 daddr and ffff:ffff:ffff:: . th dport timeout 60s }
    }

    ## Mark high-throughput threaded connections to a service as AF13
    chain threaded_service_response {
        ct bytes < $threaded_service_bytes return
        ct mark set ct mark and $ct_unused_dyn or $af13
        update @threaded_services { meta l4proto . ip daddr . ip saddr and 255.255.255.0 . th sport timeout 60s }
        update @threaded_services6 { meta l4proto . ip6 daddr . ip6 saddr and ffff:ffff:ffff:: . th sport timeout 60s }
    }

    ## Mark threaded bulk clients as CS1
    chain threaded_client {
        ## Threaded bulk client meter rules are added here by init script
    }

    ## Mark threaded bulk clients as CS1
    chain threaded_client_response {
        ## Threaded bulk client meter rules are added here by init script
    }

    chain dynamic_realtime {
        ## Classify high-throughput connections exceeding 200pps as Best Effort (CS0)
        update @high_throughput { meta l4proto . ip saddr . th sport . ip daddr . th dport timeout 5s limit rate over 200/second burst 100 packets } ct mark set ct mark and $ct_unused_dyn or $cs0 return
        update @high_throughput6 { meta l4proto . ip6 saddr . th sport . ip6 daddr . th dport timeout 5s limit rate over 200/second burst 100 packets } ct mark set ct mark and $ct_unused_dyn or $cs0 return

        ## Return high-throughput connection responses
        meta l4proto . ip daddr . th dport . ip saddr . th sport @high_throughput return
        meta l4proto . ip6 daddr . th dport . ip6 saddr . th sport @high_throughput6 return

        ## Classify small packet flows as real-time (CS4)
        ct avgpkt 0-450 ct mark set ct mark and $ct_unused_dyn or $cs4 return

        ## Classify remaining packets as Best Effort (CS0)
        ct mark set ct mark and $ct_unused_dyn or $cs0
    }

    ## Sets for stateful tracking
    set threaded_services {
        type inet_proto . ipv4_addr . ipv4_addr . inet_service
        flags timeout
    }

    set threaded_services6 {
        type inet_proto . ipv6_addr . ipv6_addr . inet_service
        flags timeout
    }

    set threaded_clients {
        type inet_proto . ipv4_addr . inet_service
        flags timeout
    }

    set threaded_clients6 {
        type inet_proto . ipv6_addr . inet_service
        flags timeout
    }

    set high_throughput {
        type inet_proto . ipv4_addr . inet_service . ipv4_addr . inet_service
        flags timeout
    }

    set high_throughput6 {
        type inet_proto . ipv6_addr . inet_service . ipv6_addr . inet_service
        flags timeout
    }

    ## IP version agnostic DSCP set chains
    chain dscp_set_cs0 {
        ip dscp set cs0
        ip6 dscp set cs0
    }

    chain dscp_set_le {
        ip dscp set $lephb
        ip6 dscp set $lephb
    }

    chain dscp_set_cs1 {
        ip dscp set cs1
        ip6 dscp set cs1
    }

    chain dscp_set_af11 {
        ip dscp set af11
        ip6 dscp set af11
    }

    chain dscp_set_af12 {
        ip dscp set af12
        ip6 dscp set af12
    }

    chain dscp_set_af13 {
        ip dscp set af13
        ip6 dscp set af13
    }

    chain dscp_set_cs2 {
        ip dscp set cs2
        ip6 dscp set cs2
    }

    chain dscp_set_af21 {
        ip dscp set af21
        ip6 dscp set af21
    }

    chain dscp_set_af22 {
        ip dscp set af22
        ip6 dscp set af22
    }

    chain dscp_set_af23 {
        ip dscp set af23
        ip6 dscp set af23
    }

    chain dscp_set_cs3 {
        ip dscp set cs3
        ip6 dscp set cs3
    }

    chain dscp_set_af31 {
        ip dscp set af31
        ip6 dscp set af31
    }

    chain dscp_set_af32 {
        ip dscp set af32
        ip6 dscp set af32
    }

    chain dscp_set_af33 {
        ip dscp set af33
        ip6 dscp set af33
    }

    chain dscp_set_cs4 {
        ip dscp set cs4
        ip6 dscp set cs4
    }

    chain dscp_set_af41 {
        ip dscp set af41
        ip6 dscp set af41
    }

    chain dscp_set_af42 {
        ip dscp set af42
        ip6 dscp set af42
    }

    chain dscp_set_af43 {
        ip dscp set af43
        ip6 dscp set af43
    }

    chain dscp_set_cs5 {
        ip dscp set cs5
        ip6 dscp set cs5
    }

    chain dscp_set_va {
        ip dscp set 44
        ip6 dscp set 44
    }

    chain dscp_set_ef {
        ip dscp set ef
        ip6 dscp set ef
    }

    chain dscp_set_cs6 {
        ip dscp set cs6
        ip6 dscp set cs6
    }

    chain dscp_set_cs7 {
        ip dscp set cs7
        ip6 dscp set cs7
    }

    ## Set conntrack DSCP mark without modifying unused bits
    chain ct_set_cs0 {
        ct mark set ct mark and $ct_unused or $cs0 or $ct_unclassified
    }

    chain ct_set_le {
        ct mark set ct mark and $ct_unused or $lephb
    }

    chain ct_set_cs1 {
        ct mark set ct mark and $ct_unused or $cs1
    }

    chain ct_set_af11 {
        ct mark set ct mark and $ct_unused or $af11
    }

    chain ct_set_af12 {
        ct mark set ct mark and $ct_unused or $af12
    }

    chain ct_set_af13 {
        ct mark set ct mark and $ct_unused or $af13
    }

    chain ct_set_cs2 {
        ct mark set ct mark and $ct_unused or $cs2
    }

    chain ct_set_af21 {
        ct mark set ct mark and $ct_unused or $af21
    }

    chain ct_set_af22 {
        ct mark set ct mark and $ct_unused or $af22
    }

    chain ct_set_af23 {
        ct mark set ct mark and $ct_unused or $af23
    }

    chain ct_set_cs3 {
        ct mark set ct mark and $ct_unused or $cs3
    }

    chain ct_set_af31 {
        ct mark set ct mark and $ct_unused or $af31
    }

    chain ct_set_af32 {
        ct mark set ct mark and $ct_unused or $af32
    }

    chain ct_set_af33 {
        ct mark set ct mark and $ct_unused or $af33
    }

    chain ct_set_cs4 {
        ct mark set ct mark and $ct_unused or $cs4
    }

    chain ct_set_af41 {
        ct mark set ct mark and $ct_unused or $af41
    }

    chain ct_set_af42 {
        ct mark set ct mark and $ct_unused or $af42
    }

    chain ct_set_af43 {
        ct mark set ct mark and $ct_unused or $af43
    }

    chain ct_set_cs5 {
        ct mark set ct mark and $ct_unused or $cs5
    }

    chain ct_set_va {
        ct mark set ct mark and $ct_unused or $va
    }

    chain ct_set_ef {
        ct mark set ct mark and $ct_unused or $ef
    }

    chain ct_set_cs6 {
        ct mark set ct mark and $ct_unused or $cs6
    }

    chain ct_set_cs7 {
        ct mark set ct mark and $ct_unused or $cs7
    }
}

## Include configurable rules
include "/tmp/etc/dscpclassify-post.include"
