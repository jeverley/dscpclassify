table inet fw4 {
	ct helper amanda {
		type "amanda" protocol udp
		l3proto inet
	}

	ct helper ftp {
		type "ftp" protocol tcp
		l3proto inet
	}

	ct helper RAS {
		type "RAS" protocol udp
		l3proto inet
	}

	ct helper Q.931 {
		type "Q.931" protocol tcp
		l3proto inet
	}

	ct helper irc {
		type "irc" protocol tcp
		l3proto ip
	}

	ct helper pptp {
		type "pptp" protocol tcp
		l3proto ip
	}

	ct helper sip {
		type "sip" protocol udp
		l3proto inet
	}

	ct helper snmp {
		type "snmp" protocol udp
		l3proto ip
	}

	ct helper tftp {
		type "tftp" protocol udp
		l3proto inet
	}

	chain input {
		type filter hook input priority filter; policy drop;
		iifname "lo" accept comment "!fw4: Accept traffic from loopback"
		ct state established,related accept comment "!fw4: Allow inbound established and related flows"
		ct state invalid drop comment "!fw4: Drop flows with invalid conntrack state"
		tcp flags syn / fin,syn,rst,ack jump syn_flood comment "!fw4: Rate limit TCP syn packets"
		meta nfproto ipv4 iifname { "br-lan", "br-swlan", "eth2" } jump input_lan comment "!fw4: Handle lan IPv4 input traffic"
		meta nfproto ipv4 iifname { "eth0", "eth5" } jump input_wan comment "!fw4: Handle wan IPv4 input traffic"
		jump handle_reject
	}

	chain forward {
		type filter hook forward priority filter; policy drop;
		ct state established,related accept comment "!fw4: Allow forwarded established and related flows"
		ct state invalid drop comment "!fw4: Drop flows with invalid conntrack state"
		meta nfproto ipv4 iifname { "br-lan", "br-swlan", "eth2" } jump forward_lan comment "!fw4: Handle lan IPv4 forward traffic"
		meta nfproto ipv4 iifname { "eth0", "eth5" } jump forward_wan comment "!fw4: Handle wan IPv4 forward traffic"
		jump upnp_forward comment "Hook into miniupnpd forwarding chain"
		jump handle_reject
	}

	chain output {
		type filter hook output priority filter; policy drop;
		oifname "lo" accept comment "!fw4: Accept traffic towards loopback"
		ct state established,related accept comment "!fw4: Allow outbound established and related flows"
		ct state invalid drop comment "!fw4: Drop flows with invalid conntrack state"
		meta nfproto ipv4 oifname { "br-lan", "br-swlan", "eth2" } jump output_lan comment "!fw4: Handle lan IPv4 output traffic"
		meta nfproto ipv4 oifname { "eth0", "eth5" } jump output_wan comment "!fw4: Handle wan IPv4 output traffic"
		jump handle_reject
	}

	chain prerouting {
		type filter hook prerouting priority filter; policy accept;
		meta nfproto ipv4 iifname { "br-lan", "br-swlan", "eth2" } jump helper_lan comment "!fw4: Handle lan IPv4 helper assignment"
	}

	chain handle_reject {
		meta l4proto tcp reject with tcp reset comment "!fw4: Reject TCP traffic"
		reject comment "!fw4: Reject any other traffic"
	}

	chain syn_flood {
		limit rate 25/second burst 50 packets return comment "!fw4: Accept SYN packets below rate-limit"
		drop comment "!fw4: Drop excess packets"
	}

	chain input_lan {
		jump accept_from_lan
	}

	chain output_lan {
		jump accept_to_lan
	}

	chain forward_lan {
		meta nfproto ipv4 jump accept_to_Net2Shield comment "!fw4: Accept lan to Net2Shield IPv4 forwarding"
		meta nfproto ipv4 jump accept_to_wan comment "!fw4: Accept lan to wan IPv4 forwarding"
		meta nfproto ipv4 jump accept_to_Proton1VPN comment "!fw4: Accept lan to Proton1VPN IPv4 forwarding"
		jump accept_to_lan
		log prefix "reject lan forward: "
	}

	chain helper_lan {
		udp dport 10080 ct helper set "amanda" comment "!fw4: Amanda backup and archiving proto"
		tcp dport 21 ct helper set "ftp" comment "!fw4: FTP passive connection tracking"
		udp dport 1719 ct helper set "RAS" comment "!fw4: RAS proto tracking"
		tcp dport 1720 ct helper set "Q.931" comment "!fw4: Q.931 proto tracking"
		meta nfproto ipv4 tcp dport 6667 ct helper set "irc" comment "!fw4: IRC DCC connection tracking"
		meta nfproto ipv4 tcp dport 1723 ct helper set "pptp" comment "!fw4: PPTP VPN connection tracking"
		udp dport 5060 ct helper set "sip" comment "!fw4: SIP VoIP connection tracking"
		meta nfproto ipv4 udp dport 161 ct helper set "snmp" comment "!fw4: SNMP monitoring connection tracking"
		udp dport 69 ct helper set "tftp" comment "!fw4: TFTP connection tracking"
	}

	chain accept_from_lan {
		meta nfproto ipv4 iifname { "br-lan", "br-swlan", "eth2" } counter packets 18093 bytes 1425557 accept comment "!fw4: accept lan IPv4 traffic"
	}

	chain accept_to_lan {
		meta nfproto ipv4 oifname { "br-lan", "br-swlan", "eth2" } counter packets 10 bytes 3528 accept comment "!fw4: accept lan IPv4 traffic"
	}

	chain input_wan {
		meta nfproto ipv4 udp dport 68 counter packets 0 bytes 0 accept comment "!fw4: Allow-DHCP-Renew"
		icmp type echo-request counter packets 15308 bytes 695648 accept comment "!fw4: Allow-Ping"
		meta nfproto ipv4 meta l4proto igmp counter packets 0 bytes 0 accept comment "!fw4: Allow-IGMP"
		jump reject_from_wan
	}

	chain output_wan {
		jump accept_to_wan
	}

	chain forward_wan {
		meta nfproto ipv4 meta l4proto esp counter packets 0 bytes 0 jump accept_to_lan comment "!fw4: Allow-IPSec-ESP"
		meta nfproto ipv4 udp dport 500 counter packets 0 bytes 0 jump accept_to_lan comment "!fw4: Allow-ISAKMP"
		jump reject_to_wan
		log prefix "reject wan forward: "
	}

	chain accept_to_wan {
		meta nfproto ipv4 oifname { "eth0", "eth5" } counter packets 18518 bytes 1621931 accept comment "!fw4: accept wan IPv4 traffic"
	}

	chain reject_from_wan {
		meta nfproto ipv4 iifname { "eth0", "eth5" } counter packets 3111 bytes 159533 log prefix "reject wan in: " jump handle_reject comment "!fw4: reject wan IPv4 traffic"
	}

	chain reject_to_wan {
		meta nfproto ipv4 oifname { "eth0", "eth5" } counter packets 0 bytes 0 log prefix "reject wan out: " jump handle_reject comment "!fw4: reject wan IPv4 traffic"
	}

	chain input_Net2Shield {
		jump reject_from_Net2Shield
	}

	chain output_Net2Shield {
		jump accept_to_Net2Shield
	}

	chain forward_Net2Shield {
		jump reject_to_Net2Shield
		log prefix "reject Net2Shield forward: "
	}

	chain accept_to_Net2Shield {
	}

	chain reject_from_Net2Shield {
	}

	chain reject_to_Net2Shield {
	}

	chain input_Proton1VPN {
		jump reject_from_Proton1VPN
	}

	chain output_Proton1VPN {
		jump accept_to_Proton1VPN
	}

	chain forward_Proton1VPN {
		jump reject_to_Proton1VPN
		log prefix "reject Proton1VPN forward: "
	}

	chain accept_to_Proton1VPN {
	}

	chain reject_from_Proton1VPN {
	}

	chain reject_to_Proton1VPN {
	}

	chain dstnat {
		type nat hook prerouting priority dstnat; policy accept;
		jump upnp_prerouting comment "Hook into miniupnpd prerouting chain"
	}

	chain srcnat {
		type nat hook postrouting priority srcnat; policy accept;
		meta nfproto ipv4 oifname { "eth0", "eth5" } jump srcnat_wan comment "!fw4: Handle wan IPv4 srcnat traffic"
		jump upnp_postrouting comment "Hook into miniupnpd postrouting chain"
	}

	chain srcnat_wan {
		meta nfproto ipv4 masquerade comment "!fw4: Masquerade IPv4 wan traffic"
	}

	chain srcnat_Net2Shield {
		meta nfproto ipv4 masquerade comment "!fw4: Masquerade IPv4 Net2Shield traffic"
	}

	chain srcnat_Proton1VPN {
		meta nfproto ipv4 masquerade comment "!fw4: Masquerade IPv4 Proton1VPN traffic"
	}

	chain raw_prerouting {
		type filter hook prerouting priority raw; policy accept;
	}

	chain raw_output {
		type filter hook output priority raw; policy accept;
	}

	chain mangle_prerouting {
		type filter hook prerouting priority mangle; policy accept;
	}

	chain mangle_postrouting {
		type filter hook postrouting priority mangle; policy accept;
	}

	chain mangle_input {
		type filter hook input priority mangle; policy accept;
	}

	chain mangle_output {
		type route hook output priority mangle; policy accept;
	}

	chain mangle_forward {
		type filter hook forward priority mangle; policy accept;
		meta nfproto ipv4 iifname { "eth0", "eth5" } tcp flags syn tcp option maxseg size set rt mtu comment "!fw4: Zone wan IPv4 ingress MTU fixing"
		meta nfproto ipv4 oifname { "eth0", "eth5" } tcp flags syn tcp option maxseg size set rt mtu comment "!fw4: Zone wan IPv4 egress MTU fixing"
	}

	chain upnp_forward {
	}

	chain upnp_prerouting {
	}

	chain upnp_postrouting {
	}
}
table inet dscpclassify {
	set threaded_clients {
		type ipv4_addr . inet_service . inet_proto
		size 65535
		flags dynamic,timeout
	}

	set threaded_services {
		type ipv4_addr . ipv4_addr . inet_service . inet_proto
		size 65535
		flags dynamic,timeout
	}

	map ct_dscp {
		type mark : verdict
		elements = { 0x00000000 : goto dscp_set_cs0, 0x00000001 : goto dscp_set_le, 0x00000008 : goto dscp_set_cs1, 0x0000000a : goto dscp_set_af11, 0x0000000c : goto dscp_set_af12,
			     0x0000000e : goto dscp_set_af13, 0x00000010 : goto dscp_set_cs2, 0x00000012 : goto dscp_set_af21, 0x00000014 : goto dscp_set_af22, 0x00000016 : goto dscp_set_af23,
			     0x00000018 : goto dscp_set_cs3, 0x0000001a : goto dscp_set_af31, 0x0000001c : goto dscp_set_af32, 0x0000001e : goto dscp_set_af33, 0x00000020 : goto dscp_set_cs4,
			     0x00000022 : goto dscp_set_af41, 0x00000024 : goto dscp_set_af42, 0x00000026 : goto dscp_set_af43, 0x00000028 : goto dscp_set_cs5, 0x0000002c : goto dscp_set_va,
			     0x0000002e : goto dscp_set_ef, 0x00000030 : goto dscp_set_cs6, 0x00000038 : goto dscp_set_cs7 }
	}

	map ct_wmm {
		type mark : verdict
		elements = { 0x00000000 : goto dscp_set_cs0, 0x00000001 : goto dscp_set_le, 0x00000008 : goto dscp_set_cs1, 0x0000000a : goto dscp_set_cs0, 0x0000000c : goto dscp_set_cs0,
			     0x0000000e : goto dscp_set_cs0, 0x00000010 : goto dscp_set_cs0, 0x00000012 : goto dscp_set_cs3, 0x00000014 : goto dscp_set_cs3, 0x00000016 : goto dscp_set_cs3,
			     0x00000018 : goto dscp_set_cs4, 0x0000001a : goto dscp_set_cs4, 0x0000001c : goto dscp_set_cs4, 0x0000001e : goto dscp_set_cs4, 0x00000020 : goto dscp_set_cs4,
			     0x00000022 : goto dscp_set_cs4, 0x00000024 : goto dscp_set_cs4, 0x00000026 : goto dscp_set_cs4, 0x00000028 : goto dscp_set_cs5, 0x0000002c : goto dscp_set_cs6,
			     0x0000002e : goto dscp_set_cs6, 0x00000030 : goto dscp_set_cs7, 0x00000038 : goto dscp_set_cs7 }
	}

	map dscp_ct {
		type dscp : verdict
		elements = { cs0 : goto ct_set_cs0,
			     0x01 : goto ct_set_le,
			     cs1 : goto ct_set_cs1,
			     af11 : goto ct_set_af11,
			     af12 : goto ct_set_af12,
			     af13 : goto ct_set_af13,
			     cs2 : goto ct_set_cs2,
			     af21 : goto ct_set_af21,
			     af22 : goto ct_set_af22,
			     af23 : goto ct_set_af23,
			     cs3 : goto ct_set_cs3,
			     af31 : goto ct_set_af31,
			     af32 : goto ct_set_af32,
			     af33 : goto ct_set_af33,
			     cs4 : goto ct_set_cs4,
			     af41 : goto ct_set_af41,
			     af42 : goto ct_set_af42,
			     af43 : goto ct_set_af43,
			     cs5 : goto ct_set_cs5,
			     0x2c : goto ct_set_va,
			     ef : goto ct_set_ef,
			     cs6 : goto ct_set_cs6,
			     cs7 : goto ct_set_cs7 }
	}

	chain dscp_set_cs0 {
		ip dscp set cs0
		ip6 dscp set cs0
	}

	chain dscp_set_le {
		ip dscp set 0x01
		ip6 dscp set 0x01
	}

	chain dscp_set_cs1 {
		ip dscp set cs1
		ip6 dscp set cs1
	}

	chain dscp_set_af11 {
		ip dscp set af11
		ip6 dscp set af11
	}

	chain dscp_set_af12 {
		ip dscp set af12
		ip6 dscp set af12
	}

	chain dscp_set_af13 {
		ip dscp set af13
		ip6 dscp set af13
	}

	chain dscp_set_cs2 {
		ip dscp set cs2
		ip6 dscp set cs2
	}

	chain dscp_set_af21 {
		ip dscp set af21
		ip6 dscp set af21
	}

	chain dscp_set_af22 {
		ip dscp set af22
		ip6 dscp set af22
	}

	chain dscp_set_af23 {
		ip dscp set af23
		ip6 dscp set af23
	}

	chain dscp_set_cs3 {
		ip dscp set cs3
		ip6 dscp set cs3
	}

	chain dscp_set_af31 {
		ip dscp set af31
		ip6 dscp set af31
	}

	chain dscp_set_af32 {
		ip dscp set af32
		ip6 dscp set af32
	}

	chain dscp_set_af33 {
		ip dscp set af33
		ip6 dscp set af33
	}

	chain dscp_set_cs4 {
		ip dscp set cs4
		ip6 dscp set cs4
	}

	chain dscp_set_af41 {
		ip dscp set af41
		ip6 dscp set af41
	}

	chain dscp_set_af42 {
		ip dscp set af42
		ip6 dscp set af42
	}

	chain dscp_set_af43 {
		ip dscp set af43
		ip6 dscp set af43
	}

	chain dscp_set_cs5 {
		ip dscp set cs5
		ip6 dscp set cs5
	}

	chain dscp_set_va {
		ip dscp set 0x2c
		ip6 dscp set 0x2c
	}

	chain dscp_set_ef {
		ip dscp set ef
		ip6 dscp set ef
	}

	chain dscp_set_cs6 {
		ip dscp set cs6
		ip6 dscp set cs6
	}

	chain dscp_set_cs7 {
		ip dscp set cs7
		ip6 dscp set cs7
	}

	chain ct_set_cs0 {
		ct mark set ct mark & 0xffffff40 | 0x00000040
	}

	chain ct_set_le {
		ct mark set ct mark & 0xffffff01 | 0x00000001
	}

	chain ct_set_cs1 {
		ct mark set ct mark & 0xffffff08 | 0x00000008
	}

	chain ct_set_af11 {
		ct mark set ct mark & 0xffffff0a | 0x0000000a
	}

	chain ct_set_af12 {
		ct mark set ct mark & 0xffffff0c | 0x0000000c
	}

	chain ct_set_af13 {
		ct mark set ct mark & 0xffffff0e | 0x0000000e
	}

	chain ct_set_cs2 {
		ct mark set ct mark & 0xffffff10 | 0x00000010
	}

	chain ct_set_af21 {
		ct mark set ct mark & 0xffffff12 | 0x00000012
	}

	chain ct_set_af22 {
		ct mark set ct mark & 0xffffff14 | 0x00000014
	}

	chain ct_set_af23 {
		ct mark set ct mark & 0xffffff16 | 0x00000016
	}

	chain ct_set_cs3 {
		ct mark set ct mark & 0xffffff18 | 0x00000018
	}

	chain ct_set_af31 {
		ct mark set ct mark & 0xffffff1a | 0x0000001a
	}

	chain ct_set_af32 {
		ct mark set ct mark & 0xffffff1c | 0x0000001c
	}

	chain ct_set_af33 {
		ct mark set ct mark & 0xffffff1e | 0x0000001e
	}

	chain ct_set_cs4 {
		ct mark set ct mark & 0xffffff20 | 0x00000020
	}

	chain ct_set_af41 {
		ct mark set ct mark & 0xffffff22 | 0x00000022
	}

	chain ct_set_af42 {
		ct mark set ct mark & 0xffffff24 | 0x00000024
	}

	chain ct_set_af43 {
		ct mark set ct mark & 0xffffff26 | 0x00000026
	}

	chain ct_set_cs5 {
		ct mark set ct mark & 0xffffff28 | 0x00000028
	}

	chain ct_set_va {
		ct mark set ct mark & 0xffffff2c | 0x0000002c
	}

	chain ct_set_ef {
		ct mark set ct mark & 0xffffff2e | 0x0000002e
	}

	chain ct_set_cs6 {
		ct mark set ct mark & 0xffffff30 | 0x00000030
	}

	chain ct_set_cs7 {
		ct mark set ct mark & 0xffffff38 | 0x00000038
	}

	chain input {
		type filter hook input priority filter + 2; policy accept;
		iifname "lo" return
		ct mark & 0x000000ff == 0x00000000 ct direction original jump static_classify
		ct mark & 0x00000080 == 0x00000080 jump dynamic_classify
	}

	chain postrouting {
		type filter hook postrouting priority filter + 2; policy accept;
		oifname "lo" return
		ct mark & 0x000000ff == 0x00000000 ct direction original jump static_classify
		ct mark & 0x00000080 == 0x00000080 jump dynamic_classify
		oifname { "br-lan", "br-swlan", "eth2" } ct mark & 0x0000003f vmap @ct_wmm
		ct mark & 0x0000003f vmap @ct_dscp
	}

	chain static_classify {
		ip daddr 88.82.11.0/24 udp sport 4500 udp dport 4500 counter packets 0 bytes 0 goto ct_set_ef comment "Vodafone UK WiFiCall ESP"
		udp dport 3478 counter packets 0 bytes 0 goto ct_set_af41 comment "STUN various"
		meta l4proto udp ip daddr 95.172.238.85 counter packets 0 bytes 0 goto ct_set_ef comment "Voipify VoIP"
		meta l4proto icmp counter packets 13 bytes 756 goto ct_set_cs5 comment "ICMP"
		ip daddr 17.0.0.0/8 th sport { 16384-16387, 16393-16402 } counter packets 0 bytes 0 goto ct_set_af41 comment "Apple FaceTime"
		meta l4proto udp ip daddr { 66.22.196.0/22, 66.22.204.0/22, 66.22.246.0/24 } counter packets 0 bytes 0 goto ct_set_ef comment "Discord VoIP"
		ip daddr { 13.107.64.0/18, 52.112.0.0/14, 52.122.0.0/15 } udp dport 3478-3481 udp sport 50040-50059 counter packets 0 bytes 0 goto ct_set_af21 comment "Microsoft Teams sharing"
		ip daddr { 13.107.64.0/18, 52.112.0.0/14, 52.122.0.0/15 } udp dport 3478-3481 udp sport 50020-50039 counter packets 0 bytes 0 goto ct_set_af41 comment "Microsoft Teams video"
		ip daddr { 13.107.64.0/18, 52.112.0.0/14, 52.122.0.0/15 } udp dport 3478-3481 udp sport 50000-50019 counter packets 0 bytes 0 goto ct_set_ef comment "Microsoft Teams voice"
		tcp dport 22 counter packets 0 bytes 0 goto ct_set_cs2 comment "SSH"
		udp dport 123 counter packets 0 bytes 0 goto ct_set_cs5 comment "NTP"
		udp dport { 67, 68 } counter packets 0 bytes 0 goto ct_set_cs5 comment "BOOTP/DHCP"
		meta l4proto { tcp, udp } ip daddr { 1.0.0.1, 1.1.1.1, 8.8.4.4, 8.8.8.8, 9.9.9.9, 9.9.9.11, 94.140.14.0/24, 149.112.112.11, 149.112.112.112 } th dport 443 counter packets 0 bytes 0 goto ct_set_cs5 comment "DoH"
		meta l4proto { tcp, udp } th dport { 53, 853, 5353 } counter packets 7 bytes 526 goto ct_set_cs5 comment "DNS"
		ip dscp != { cs0, cs6, cs7 } iifname != { "eth0", "eth5" } (@nh,8,8 & 0xfc) >> 2 vmap @dscp_ct
		meta l4proto != { tcp, udp } goto ct_set_cs0
		ct mark set ct mark & 0xffffff80 | 0x00000080
	}

	chain dynamic_classify {
		ct status & seen-reply != seen-reply return
		ct direction reply goto dynamic_classify_reply
		ip saddr . th sport . meta l4proto @threaded_clients goto threaded_client
		ip saddr . ip daddr & 255.255.255.0 . th dport . meta l4proto @threaded_services goto threaded_service
	}

	chain dynamic_classify_reply {
		ct reply packets 1 jump established_connection
		ip daddr . th dport . meta l4proto @threaded_clients goto threaded_client_reply
		ip daddr . ip saddr & 255.255.255.0 . th sport . meta l4proto @threaded_services goto threaded_service_reply
	}

	chain established_connection {
		meter tc_detect size 65535 { ip daddr . th dport . meta l4proto timeout 5s limit rate over 9/minute } add @threaded_clients { ip daddr . th dport . meta l4proto timeout 30s }
		meter ts_detect size 65535 { ip daddr . ip saddr & 255.255.255.0 . th sport . meta l4proto timeout 5s limit rate over 2/minute } add @threaded_services { ip daddr . ip saddr & 255.255.255.0 . th sport . meta l4proto timeout 30s }
	}

	chain threaded_client {
		meter tc_orig_bulk size 65535 { ip saddr . th sport . meta l4proto timeout 5m limit rate over 9999 bytes/hour } update @threaded_clients { ip saddr . th sport . meta l4proto timeout 5m } goto ct_set_le
	}

	chain threaded_client_reply {
		meter tc_reply_bulk size 65535 { ip daddr . th dport . meta l4proto timeout 5m limit rate over 9999 bytes/hour } update @threaded_clients { ip daddr . th dport . meta l4proto timeout 5m } goto ct_set_le
	}

	chain threaded_service {
		ct original bytes < 1000000 return
		update @threaded_services { ip saddr . ip daddr & 255.255.255.0 . th dport . meta l4proto timeout 5m }
		goto ct_set_af13
	}

	chain threaded_service_reply {
		ct reply bytes < 1000000 return
		update @threaded_services { ip daddr . ip saddr & 255.255.255.0 . th sport . meta l4proto timeout 5m }
		goto ct_set_af13
	}
}
